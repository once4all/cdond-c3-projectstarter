version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}

  destroy-backend:
    description: Destroy back-end.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}

  destroy-frontend:
    description: Destroy front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            pwd

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test the code
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo -e '\n' ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "e4:ec:ef:29:78:d8:f4:cf:42:1e:60:d2:8f:e2:8c:c8" ]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            TEMP=$(npm run migrations)
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." $TEMP
            then
            # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
            curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y update
            sudo apt -y install curl tar gzip
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            pwd
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
      - aws-s3/sync:
          from: ~/project/frontend/dist/
          to: s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/
          session-duration: "36000"
      - destroy-frontend
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "e4:ec:ef:29:78:d8:f4:cf:42:1e:60:d2:8f:e2:8c:c8" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update npm
            apk add --update pm2
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
            apk add --update ansible curl
      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            cd ..
            tar -C ~/project/backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-backend
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${BACKEND_IP}
            RESULT=$(curl -s http://${BACKEND_IP}:3030/api/status)
            echo ${RESULT}
            if ${RESULT} | grep "ok"
            then
              echo "Backend Smoke Test Success"
              exit 0
            else
              echo "Backend Smoke Test Failed"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com/#/employees"      
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install nodejs
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations

#cleanup:
#  docker:
#  # Docker image here
#  steps:
#    # Checkout code from git
#    - run:
#        name: Get old stack workflow id
#        command: |
#          # your code here
#          export OldWorkflowID="the id here"
#          export STACKS=[] #put the list of stacks here
#    - run:
#        name: Remove old stacks and files
#        command: |
#          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#          then
#            # your code here
#          fi
#

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
#                filters:
      #                  branches:
      #                    only: [ test-feature-branch ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]
      - cloudfront-update:
          requires: [ smoke-test ]
#      - cleanup:
#          requires: [ cloudfront-update ]